{
    "scope": "source.c++, meta.block.c++, meta.function.c++",

    "completions":
    [
        {"trigger": "vectorlld", "contents": "vector<lld> ${1:arr}"}, 
        {"trigger": "vectorpalld", "contents": "vector<pair<lld,lld>> ${1:arr}"}, 
        {"trigger": "vectorvelldp2", "contents": "vector<vector<lld>> ${1:dp}(${2:n}, vector<lld>(${3:m}, ${4:-1})) $0"}, 
        {"trigger": "vectorstr", "contents": "vector<string> ${1:arr}"}, 
        {"trigger": "vectorcha", "contents": "vector<char> ${1:arr}"}, 
        {"trigger": "vectorboo", "contents": "vector<bool> ${1:visited}"}, 
        {"trigger": "setlld", "contents": "set<lld> ${1:visited}"}, 
        {"trigger": "setpall", "contents": "set<pair<lld,lld>> ${1:arr}"}, 
        {"trigger": "setstr", "contents": "set<string> ${1:arr}"}, 
        {"trigger": "setchar", "contents": "set<char> ${1:arr}"}, 
        {"trigger": "setbool", "contents": "set<bool> ${1:arr}"}, 
        {"trigger": "maplld", "contents": "map<lld,lld> ${1:arr}"}, 
        {"trigger": "mapstr", "contents": "map<string, lld> ${1:arr}"}, 
        {"trigger": "front", "contents": "front()"}, 
        {"trigger": "first", "contents": "first"}, 
        {"trigger": "second", "contents": "second"}, 
        {"trigger": "make_pair", "contents": "make_pair(${1:fir}, ${2:sec})"}, 
        {"trigger": "make_tuple", "contents": "make_tuple"}, 
        {"trigger": "push_back", "contents": "push_back(${1:el})"}, 
        {"trigger": "max_element", "contents": "max_element(all(${1:arr}))"}, 
        {"trigger": "min_element", "contents": "min_element(all(${1:arr}))"}, 
        {"trigger": "accumulate", "contents": "accumulate(all(${1:arr}), ${2:0ll})"}, 
        {"trigger": "sortarr", "contents": "sort(${1:r}all(${2:arr}))"}, 
        {"trigger": "emplace_back", "contents": "emplace_back()"}, 
        {"trigger": "insert", "contents": "insert()"}, 
        {"trigger": "push", "contents": "push()"}, 
        {"trigger": "for4", "contents": "for4(${1: i}, ${2:0ll}, ${3:n}, ${4:1ll}) {${0}}"}, 
        {"trigger": "EACH", "contents": "EACH(${1:it}, ${2:arr}) {${0}}"}, 
        {"trigger": "find", "contents": "find(all(${1:arr}), ${2:val}) != ${1:arr}.end()"}, 
        {"trigger": "lower_bound", "contents": "lower_bound(all(${1:arr}), ${2:val})"}, 
        {"trigger": "upper_bound", "contents": "upper_bound(all(${1:arr}), ${2:val})"}, 
        {"trigger": "reverse", "contents": "reverse(all(${1:arr}))"}, 
        {"trigger": "len", "contents": "len(${1:arr})"}, 
        // {"trigger": "debspace", "contents": "debspace(${1})"}, 
        // {"trigger": "debline", "contents": "debline(${1})"}, 
        {"trigger": "error", "contents": "_____error_____(${1})"}, 
        {"trigger": "cin", "contents": "cin >> "}, 
        {"trigger": "cout", "contents": "cout << "}, 
        {"trigger": "d4dir", "contents": "const lld d4i[4]={-1, 0, 1, 0}, d4j[4]={0, 1, 0, -1};"}, 
        {"trigger": "d8dir", "contents": "const lld d8i[8]={-1, -1, 0, 1, 1, 1, 0, -1}, d8j[8]={0, 1, 1, 1, 0, -1, -1, -1};"},
        // {"trigger": "read", "contents": "Read(${1})"}, 
        // {"trigger": "println", "contents": "Println(${1})"}, 
        // {"trigger": "NOYES", "contents": "Println(\"NO\\0YES\" + 3 * (${1:condition}));"}, 
        {"trigger": "transform", "contents": "transform(all(${1:str}), ${1:str}.begin(), ::to${2:low}er);"}, 
    ]
}



// "vector<lld> ${1:arr}",
// "vector<pair<lld,lld>> ${1:arr}",
// "vector<vector<lld>> ${1:dp}(${2:n}, vector<lld>(${3:m}, ${4:-1})) $0",
// "vector<string> ${1:arr}",
// "vector<char> ${1:arr}",
// "vector<bool> ${1:visited}",
// "set<lld> ${1:visited}",
// "set<pair<lld,lld>> ${1:arr}",
// "set<string> ${1:arr}",
// "set<char> ${1:arr}",
// "set<bool> ${1:arr}",
// "map<lld,lld> ${1:arr}",
// "map<string, lld> ${1:arr}",
// "map<lld,string> ${1:arr}",
// "front()",
// "first",
// "second",
// "make_pair(${1:fir}, ${2:sec})",
// "make_tuple",
// "push_back(${1:el})",
// "max_element(all(${1:arr}))",
// "min_element(all(${1:arr}))",
// "accumulate(all(${1:arr}), ${2:0ll})", 
// "emplace_back()",
// "insert()",
// "push()",
// "input(${0})",
// "for4(${1: i}, ${2:0ll}, ${3:n}, ${4:1ll}) {${0}}",
// "EACH(${1:it}, ${2:arr}) {${0}}",
// "find(all(${1:arr}), ${2:val}) != ${1:arr}.end()",
// "lower_bound(all(${1:arr}), ${2:val})",
// "upper_bound(all(${1:arr}), ${2:val})",
// "reverse(all(${1:arr}))",
// "len(${1:arr})",
// "debspace(${1})",
// "debline(${1})",
// "error(${1})",
// "read(${1})",
// "println(${1})",