<snippet>
  <content><![CDATA[

// matrix exponentiation snippet::
// // courtesy Ashishgup3 via Github





lld add(lld a, lld b) {
    lld res = a + b;
    if(res >= MOD) return res - MOD;
    return res;
}

lld mult(lld a, lld b) {
    long long res = a;
    res *= b;
    if(res >= MOD) return res % MOD;
    return res;
}



const lld SZ = 2; // size of MaGiC 

struct matrix {
    lld MaGiC[SZ][SZ];

    void reset() {
        memset(MaGiC, 0, sizeof(MaGiC));
    }

    void makeiden() {
        reset();
        for(lld i=0;i<SZ;i++) {
            MaGiC[i][i] = 1;
        }
    }

    matrix operator + (const matrix &o) const {
        matrix res;
        for(lld i=0;i<SZ;i++) {
            for(lld j=0;j<SZ;j++) {
                res.MaGiC[i][j] = add(MaGiC[i][j], o.MaGiC[i][j]);
            }
        }
        return res;
    }

    matrix operator * (const matrix &o) const {
        matrix res;
        for(lld i=0;i<SZ;i++) {
            for(lld j=0;j<SZ;j++) {
                res.MaGiC[i][j] = 0;
                for(lld k=0;k<SZ;k++) {
                    res.MaGiC[i][j] = add(res.MaGiC[i][j] , mult(MaGiC[i][k] , o.MaGiC[k][j]));
                }
            }
        }
        return res;
    }
};

matrix power(matrix a, lld b) {
    if (b == 0) {
        a.makeiden();
    }
    matrix res;
    res.makeiden();
    while(b) {
        if(b & 1) {
            res = res * a;
        }
        a = a * a;
        b >>= 1;
    }
    return res;
}


// // GUIDE :
//
//  matrix m;
//  m.makeiden();
//
//  m.MaGiC[0][0] = 0, m.MaGiC[0][1] = 1;
//  m.MaGiC[1][0] = 3, m.MaGiC[1][1] = 2;
//
//  m = power(m, n);
//
//  cout << m.MaGiC[0][0];


]]></content>
  <tabTrigger>snip-matrix-expo</tabTrigger>
  <description>Matrix Expo on recurrence formula</description>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.c++</scope>
</snippet>



